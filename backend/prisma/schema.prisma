generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model comments {
  id       Int       @id @default(autoincrement())
  user_id Int
  post_id Int
  datetime DateTime? @db.Timestamp @default(now())
  desc       String?      @db.Text
  posts    posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "fk_comments_posts1")
  users    users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_comments_users1")

  @@index([post_id], map: "comments_post_id_idx")
  @@index([user_id], map: "comments_user_id_idx")
}

model likes {
  post_id Int
  user_id Int
  datetime DateTime? @db.Timestamp
  posts    posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "fk_likes_posts1")
  users    users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_likes_users1")

  @@id([post_id, user_id])
  @@index([post_id], map: "likes_post_id_idx")
  @@index([user_id], map: "likes_user_id_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model post_media {
  id        Int    @id @default(autoincrement())
  post_id   Int
  media_url String @db.Text
  user_id   Int
  posts     posts  @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "fk_post_media_posts1")
  users     users  @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_post_media_users1")

  @@index([post_id], map: "post_media_post_id_idx")
  @@index([user_id], map: "post_media_user_id_idx")
}

model posts {
  id         Int          @id @default(autoincrement())
  user_id    Int
  date       DateTime     @default(now()) @db.Timestamp
  desc       String?      @db.Text
  comments   comments[]
  likes      likes[]
  post_media post_media[]
  users      users        @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user_id")

  @@index([user_id], map: "posts_users_user_id_idx")
}

model profileimages {
  id         Int          @id @default(autoincrement())
  user_id    Int
  image_url  String   @db.Text
  date       DateTime @default(now()) @db.Timestamp
  currentImg Boolean  @default(false)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "profileimages_user_id_idx")
}

model relationships {
  follow_id                              Int
  follower_id                            Int
  date                                   String? @db.Text
  users_relationships_follow_idTousers   users   @relation("relationships_follow_idTousers", fields: [follow_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_follow_id")
  users_relationships_follower_idTousers users   @relation("relationships_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade, map: "fk_follower_id")

  @@id([follow_id, follower_id])
  @@index([follower_id], map: "relationships_follower_id_idx")
}

// Chat model for storing conversations between users
model chats {
  id         Int        @id @default(autoincrement())
  user1_id   Int
  user2_id   Int
  created_at DateTime
  updated_at DateTime?  @updatedAt
  
  // Messages in this chat
  messages   messages[]
  
  // Relations to users
  user1      users      @relation("ChatUser1", fields: [user1_id], references: [id])
  user2      users      @relation("ChatUser2", fields: [user2_id], references: [id])
}

// Messages model for storing individual messages
model messages {
  id         Int      @id @default(autoincrement())
  chat_id    Int
  sender_id  Int
  message    String   @db.Text
  created_at DateTime
  updated_at DateTime? @updatedAt
  
  // Relations
  chat       chats    @relation(fields: [chat_id], references: [id])
  sender     users    @relation(fields: [sender_id], references: [id])
}

model users {
  id                                             Int             @id @default(autoincrement())
  name                                           String          @db.VarChar(50)
  email                                          String          @unique @db.VarChar(45)
  password                                       String          @db.Text
  gender                                         String          @db.VarChar(10)
  dob                                            DateTime        @db.Date
  img                                            String?         @db.Text
  mobile_number                                  String?         @unique @db.VarChar(20)
  country                                        String?         @db.VarChar(20)
  state                                          String?         @db.VarChar(20)
  city                                           String?         @db.VarChar(20)
  comments                                       comments[]
  likes                                          likes[]
  post_media                                     post_media[]
  posts                                          posts[]
  profileimages                                  profileimages[]
  relationships_relationships_follow_idTousers   relationships[] @relation("relationships_follow_idTousers")
  relationships_relationships_follower_idTousers relationships[] @relation("relationships_follower_idTousers")
  
  // Chat relations
  sentMessages     messages[]
  chatsAsUser1     chats[]    @relation("ChatUser1")
  chatsAsUser2     chats[]    @relation("ChatUser2")
  
  // Notification relations
  notificationsReceived notifications[] @relation("NotificationsReceived")
  notificationsSent     notifications[] @relation("NotificationsSent")
}

model notifications {
  id                Int @id @default(autoincrement())
  user_reciever_id  Int 
  user_sender_id    Int
  type              String
  resource_id       Int
  message           String
  isRead            Boolean @default(false)
  createdAt         DateTime @default(now()) @db.Timestamp

  // relations
  receiver          users    @relation("NotificationsReceived", fields: [user_reciever_id], references: [id], onDelete: Cascade)
  sender            users    @relation("NotificationsSent", fields: [user_sender_id], references: [id], onDelete: Cascade)

  @@index([user_reciever_id], map: "notifications_receiver_id_idx")
  @@index([user_sender_id], map: "notifications_sender_id_idx")
}